# -*- coding: utf-8 -*-
"""Classification_For_Web

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MrN-lwnCuZE3uDaMMp3PK3Xl3X5jyhYn
"""

import os
import cv2
import numpy as np
from PIL import Image
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout


ImgSize = [300, 374] # Model
Classes = ["NORMAL", "RP"]

def LeNet():
    model=Sequential()

    model.add(Conv2D(filters=6,kernel_size=(5,5),activation="tanh",input_shape=(ImgSize[0],ImgSize[1],3)))
    model.add(MaxPooling2D(pool_size=(2,2)))

    model.add(Conv2D(filters=16,kernel_size=(5,5),activation="tanh"))
    model.add(MaxPooling2D(pool_size=(2,2)))

    model.add(Conv2D(filters=120,kernel_size=(5,5),activation="tanh"))
    model.add(MaxPooling2D(pool_size=(5,5)))

    model.add(Flatten())
    model.add(Dense(84,activation="tanh"))
    model.add(Dropout(rate=0.3))

    model.add(Dense(2,activation="softmax"))
    return model

LeNet = LeNet()
LeNet.summary()
LeNet.compile(optimizer='adamax',loss = 'binary_crossentropy',metrics=['accuracy'])

def ConvertJPG(Path):
    Format = Path.split('.')[-1]
    ImageName = Path.split('/')[-1].split('.')[0]
    root = Path.split(ImageName)[0]
    if Format != "jpg":
        converted = Image.open(Path).convert('RGB')
        newPath = os.path.join(root, ImageName + ".jpg") 
        converted.save(newPath)
        os.remove(Path)  # To remove png file
        return newPath
    else:
        return Path

def ImagePreparation(path):
    image = ConvertJPG(path)
    image = np.asarray(cv2.imread(path,cv2.IMREAD_COLOR))
    image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    image = cv2.resize(image, (ImgSize[0], ImgSize[1]), interpolation=cv2.INTER_NEAREST)
    image = image[0:375, 37:267]
    image = cv2.resize(image, (ImgSize[0], ImgSize[1]), interpolation=cv2.INTER_NEAREST)
    image = cv2.fastNlMeansDenoising(image, None, 20, 7, 21) 
    image = cv2.normalize(image, None, 0, 255, cv2.NORM_MINMAX)
    img_array = np.array(image)
    return img_array

def SingleImage_Test(path):
    image = ImagePreparation(path).reshape(300,374,3)
    
    LeNet.load_weights("/home/elgazoly/Projects/RentinitisPigmentosa/backend/tfModel/LeNet.h5")
    LeNet.compile(optimizer='adamax',loss = 'binary_crossentropy',metrics=['accuracy'])
    prediction_scores = LeNet.predict(np.expand_dims(image, axis=0))
    predicted_index = np.argmax(prediction_scores)
    return Classes[predicted_index]
    

image_path = "/home/elgazoly/Projects/RentinitisPigmentosa/backend/uploads/FAF_NORMAL (230).jpg"
SingleImage_Test(image_path)